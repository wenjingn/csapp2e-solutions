位级浮点编码规则
在接下来的题目中, 你要写的代码要实现浮点函数在浮点数的位级表示上直接运算. 你的
代码应该完全遵循IEEE浮点运算的规则, 包括当需要舍入时, 要使用向偶数舍入的方式. 
为此, 我们定义数据类型 float-bits 等价于 unsigned:

/* Access bit-level representation floating-point number */
typedef unsigned float_bits;

你的代码中不使用数据类型float, 而要使用float_bits. 你可以使用数据类型int 和 
unsigned, 包括无符号和整数常数和运算. 你不可以使用任何联合, 结构和数组. 更重要
的是, 你不能使用任何浮点数据类型, 运算或者常数. 取而代之的是, 你的代码应该执行
实现这些指定的浮点运算的位操作.
下面的函数说明了对这些规则的使用. 对于参数f, 如果f是非规格化的, 该函数返回+/-0
(保持f的符号), 否则, 返回f.

/* If f is denorm, return 0. Otherwise, return f */
float_bits float_denorm_zero(float_bits f){
    /* Decompose bit representation into parts*/
    unsigned sign = f >> 31;
    unsigned exp  = f >> 23 & 0xff;
    unsigned frac = f       & 0x7fffff;
    if (exp == 0) {
        /* Denormalized. Set fraction to 0 */
        frac = 0;
    }
    /* Reassemble bits */
    return sign<<31 | exp<<23 | frac;
}
